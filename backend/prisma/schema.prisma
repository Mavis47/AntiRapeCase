// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int   @id @default(autoincrement())
  username  String  @unique
  fullname  String   
  email    String   @unique
  password String
  age      String 
  userProfilePic  String?
  Posts   Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  sentRequests   FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  
  userFriendships Friendship[]    @relation("UserFriendships")
  friendFriendships Friendship[]  @relation("FriendFriendships")

  queries queries[]

  sentMessages Messages[] @relation("SentMessages")

  receivedMessages  Messages[] @relation("ReceivedMessages")

  SentNotification Notification[] @relation("Sender")

  Notification Notification[]

  media media[]
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  latitude  Float?
  longitude Float?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  queries   queries[]
}

model media {
  id        Int       @id @default(autoincrement())
  url       String
  type      MediaType
  userId    Int
  user      User      @relation(fields: [userId], references: [id])     
  queries   queries[]  
  createdAt DateTime  @default(now())
}

model queries {
  id              Int       @id @default(autoincrement())
  userId          Int
  postId          Int
  comment_content String
  user            User     @relation(fields: [userId], references: [id])
  post            Post     @relation(fields: [postId], references: [id])
  mediaId         Int?      // Reference to a single media item in each query (foreign key)
  media           media?    @relation(fields: [mediaId], references: [id]) // One-to-many relation
  createdAt       DateTime @default(now())
}

model FriendRequest {
  id            Int      @id @default(autoincrement())
  senderId      Int
  receiverId    Int
  sender        User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver      User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  status        RequestStatus @default(PENDING) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Friendship {
  id       Int   @id @default(autoincrement())
  userId   Int
  user     User   @relation("UserFriendships", fields: [userId], references: [id])
  friendId Int
  friend   User   @relation("FriendFriendships", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
}

model Messages {
  id          Int   @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  sender      User   @relation("SentMessages",fields: [senderId], references: [id])
  receiver    User   @relation("ReceivedMessages",fields: [receiverId], references: [id])
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime  @default(now())

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Notification{
  id         Int      @id @default(autoincrement())
  userId     Int      // The user who should receive the notification
  type       String   // Type of notification (e.g., 'message', 'comment')
  message    String   // The message or content of the notification
  read       Boolean  @default(false) // Whether the user has seen/read the notification
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   Int      // The user who performed the action (e.g., the sender of a message or the author of a comment)
  
  // Optional: You can also store a reference to the resource the notification relates to (like a post or message)
  postId     Int?     // For comment-related notifications, store the associated post ID
  messageId  Int?     // For message-related notifications, store the associated message ID

  // Define relations with other models
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
}
